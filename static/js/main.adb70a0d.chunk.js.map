{"version":3,"sources":["components/Header.js","components/Transcript/FormTab.js","components/Transcript/HeroContent.js","components/Gene/GeneForm.js","components/shared/Progress.js","components/shared/ResultList.js","components/Gene/Gene.helper.js","services/api.js","components/Gene/Gene.js","components/Hgvs/HgvsForm.js","components/Hgvs/Hgvs.helper.js","components/Hgvs/Hgvs.js","components/Transcript/TranscriptForm.js","components/App.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","grow","appBar","background","_ref","classes","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","Typography_default","variant","color","FormTab","selectedTask","selectTask","Grid_default","item","md","Paper_default","Tabs_default","value","onChange","indicatorColor","textColor","fullWidth","Tab_default","label","theme","heroContent","maxWidth","margin","padding","concat","spacing","unit","align","gutterBottom","component","GeneForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateGeneForm","state","geneFormChanged","e","setState","defineProperty","target","name","geneSymbol","sequencePosition","aminoAcid","xs","container","TextField_default","id","textField","type","textFieldLast","Component","width","progress","loadingText","justify","alignItems","CircularProgress_default","size","ResultList","transcripts","Fragment","Table_default","style","display","length","TableHead_default","TableRow_default","TableCell_default","TableBody_default","map","transcript","key","scope","href","rel","molecule","version","index_es","isGeneFormValid","sendGetRequest","request","url","cancel","axios","CancelToken","source","get","cancelToken","token","getRequestCreator","getRequestDebounced","AwesomeDebouncePromise","getTranscripts","asyncToGenerator","regenerator_default","mark","_callee","stableID","sequenceType","proteinSequenceURL","wrap","_context","prev","next","process","replace","sent","abrupt","data","t0","stop","_x","_x2","apply","arguments","hgvsApiRequest","_ref3","_callee2","_ref2","_context2","_x3","geneApiRequest","_ref5","_callee3","_ref4","symbolTranscriptsEndpointURL","geneInfo","_context3","_x4","Gene","processGene","geneFormData","isLoading","then","toUpperCase","proteinTranscripts","filter","seq","Gene_GeneForm","shared_Progress","shared_ResultList","HgvsForm","hgvsNotationChanged","persist","hgvsNotation","onUpdate","aminoAcidCodes","Ala","Cys","Asp","Glu","Phe","Gly","His","Ile","Lys","Leu","Met","Asn","Pro","Gln","Arg","Ser","Thr","Val","Trp","Tyr","isHgvsNotationValid","RegExp","test","serialiseHgvsNotation","split","prefix","substituiton","match","p","g","c","Hgvs","processHgvs","serialisedHgvsNotation","Hgvs_HgvsForm","TranscriptForm","changeTask","index","Transcript_HeroContent","PROTEIN_SEQUENCE_ENDPOINT_URL","formHolder","Transcript_FormTab","components_Gene_Gene","components_Hgvs_Hgvs","backgroundColor","palette","paper","marginTop","minHeight","boxShadow","flexWrap","App","components_Header","layout","Transcript_TranscriptForm","_layout","marginLeft","marginRight","breakpoints","up","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onSuccess","catch","error","dotenv","ReactDOM","render","CssBaseline_default","src_components_App","document","querySelector","URL","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.adb70a0d.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  root: {\n    flexGrow: 1\n  },\n  grow: {\n    flexGrow: 1\n  },\n  appBar: {\n    background: \"#000\"\n  }\n};\n\nconst Header = ({ classes }) => {\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"title\" color=\"inherit\" className={classes.grow}>\n            Ensembl Genome Browser\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(Header);\n","import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport PropTypes from \"prop-types\";\n\nconst FormTab = ({ selectedTask, selectTask }) => {\n  return (\n    <Grid item md={12}>\n      <Paper>\n        <Tabs\n          value={selectedTask}\n          onChange={selectTask}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          fullWidth\n        >\n          <Tab label=\"Transcripts by Gene\" />\n          <Tab label=\"Transcripts by HGVS\" />\n        </Tabs>\n      </Paper>\n    </Grid>\n  );\n};\n\nFormTab.propTypes = {\n  classes: PropTypes.object,\n  selectedTask: PropTypes.number\n};\n\nexport default FormTab;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = theme => ({\n  heroContent: {\n    maxWidth: 600,\n    margin: \"0 auto\",\n    padding: `${theme.spacing.unit * 4}px 0 ${theme.spacing.unit * 6}px`\n  }\n});\n\nconst HeroContent = ({ classes }) => (\n  <Grid className={classes.heroContent}>\n    <Typography\n      variant=\"display3\"\n      align=\"center\"\n      color=\"textPrimary\"\n      gutterBottom\n    >\n      Transcripts\n    </Typography>\n    <Typography\n      variant=\"title\"\n      align=\"center\"\n      color=\"textSecondary\"\n      component=\"p\"\n    >\n      Get all transcripts from a gene with the given amino acid at the specified\n      position.\n    </Typography>\n  </Grid>\n);\n\nHeroContent.propTypes = {\n  classes: PropTypes.object\n};\n\nexport default withStyles(styles)(HeroContent);\n","import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from \"prop-types\";\n\nconst styles = () => ({\n  textField: {\n    width: \"100%\"\n  },\n  textFieldLast: {\n    width: \"100%\"\n  }\n});\n\nclass GeneForm extends Component {\n  constructor(props) {\n    super(props);\n\n    // Initial state of this component\n    this.state = {\n      geneSymbol: \"\",\n      sequencePosition: \"\",\n      aminoAcid: \"\"\n    };\n  }\n\n  updateGeneForm = () => {\n    // Pass the current state values to the Gene componenst to send the API request\n    this.props.onChange(this.state);\n  };\n\n  geneFormChanged = e => {\n    this.setState({ [e.target.name]: e.target.value }, () => {\n      this.updateGeneForm();\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <Grid item xs={12} md={12}>\n        <Grid container spacing={16}>\n          <Grid item md={4} xs={12}>\n            <TextField\n              id=\"geneSymbol\"\n              label=\"Gene Symbol\"\n              onChange={this.geneFormChanged}\n              className={classes.textField}\n              margin=\"normal\"\n              name=\"geneSymbol\"\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item md={4} xs={12}>\n            <TextField\n              id=\"sequencePosition\"\n              label=\"Sequence Position\"\n              type=\"number\"\n              onChange={this.geneFormChanged}\n              className={classes.textField}\n              margin=\"normal\"\n              name=\"sequencePosition\"\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item md={4} xs={12}>\n            <TextField\n              id=\"aminoAcid\"\n              label=\"Amino Acid\"\n              onChange={this.geneFormChanged}\n              className={classes.textFieldLast}\n              margin=\"normal\"\n              name=\"aminoAcid\"\n              variant=\"outlined\"\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nGeneForm.propTypes = {\n  classes: PropTypes.object,\n  onChange: PropTypes.func\n};\n\nexport default withStyles(styles)(GeneForm);\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport PropTypes from \"prop-types\";\n\nconst styles = theme => ({\n  progress: {\n    margin: theme.spacing.unit * 2\n  }\n});\n\nconst Progress = ({ classes, loadingText }) => {\n  return (\n    <Grid container justify=\"center\" alignItems=\"center\">\n      <CircularProgress className={classes.progress} size={50} />\n      <Grid>{loadingText}</Grid>\n    </Grid>\n  );\n};\n\nProgress.propTypes = {\n  classes: PropTypes.object,\n  loadingText: PropTypes.string\n};\n\nexport default withStyles(styles)(Progress);\n","import React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { Grid } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\n\nconst ResultList = ({ transcripts }) => (\n  <React.Fragment>\n    <Table style={{ display: transcripts.length ? \"\" : \"none\" }}>\n      <TableHead>\n        <TableRow>\n          <TableCell>ID</TableCell>\n          <TableCell>Molecule</TableCell>\n          <TableCell>Version</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {transcripts.map(transcript => {\n          return (\n            <TableRow key={transcript.id}>\n              <TableCell component=\"th\" scope=\"row\">\n                <a\n                  href={\"http://www.ensembl.org/id/\" + transcript.id}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {transcript.id}\n                </a>\n              </TableCell>\n              <TableCell>{transcript.molecule}</TableCell>\n              <TableCell>{transcript.version}</TableCell>\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n\n    <Grid\n      container\n      style={{\n        display: transcripts.length ? \"none\" : \"\"\n      }}\n    >\n      No results found.\n    </Grid>\n  </React.Fragment>\n);\n\nResultList.propTypes = {\n  transcripts: PropTypes.array\n};\n\nexport default ResultList;\n","export const isGeneFormValid = ({\n  geneSymbol,\n  sequencePosition,\n  aminoAcid\n}) => {\n  // Return false if any of the form fields are empty\n  if (!geneSymbol || !sequencePosition || !aminoAcid) {\n    return false;\n  }\n\n  return true;\n};\n","import axios from \"axios\";\nimport AwesomeDebouncePromise from \"awesome-debounce-promise\";\n\nconst getRequestCreator = () => {\n  let request;\n  return url => {\n    // Cancel the previous request\n    if (request) {\n      request.cancel();\n    }\n    request = axios.CancelToken.source();\n    return axios.get(url, {\n      cancelToken: request.token\n    });\n  };\n};\n\nconst sendGetRequest = getRequestCreator();\nconst getRequestDebounced = AwesomeDebouncePromise(sendGetRequest, 500);\n\nconst getTranscripts = async (stableID, sequenceType) => {\n  try {\n    const proteinSequenceURL = process.env.REACT_APP_SEQUENCE_ENDPOINT_URL.replace(\n      \":id\",\n      stableID\n    ).replace(\":type\", sequenceType);\n\n    // Get the actual amino acid for the given position\n    const request = await getRequestDebounced(proteinSequenceURL, 500);\n    return request.data;\n  } catch (error) {\n    return [];\n  }\n};\n\nexport const hgvsApiRequest = async ({ stableID, sequenceType }) => {\n  return getTranscripts(stableID, sequenceType);\n};\n\nexport const geneApiRequest = async ({ geneSymbol }) => {\n  // Get the transcripts\n  const symbolTranscriptsEndpointURL = process.env.REACT_APP_SYMBOL_TRANSCRIPTS_ENDPOINT_URL.replace(\n    \":symbol\",\n    geneSymbol\n  );\n\n  let request = await getRequestDebounced(symbolTranscriptsEndpointURL, 500);\n  const geneInfo = request.data;\n\n  return getTranscripts(geneInfo.id, \"protein\");\n};\n","import React, { Component } from \"react\";\nimport GeneForm from \"./GeneForm\";\nimport Progress from \"components/shared/Progress\";\nimport ResultList from \"components/shared/ResultList\";\nimport { Grid } from \"@material-ui/core\";\nimport { isGeneFormValid } from \"./Gene.helper\";\nimport { geneApiRequest } from \"services/api\";\n\nclass Gene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      transcripts: []\n    };\n  }\n\n  processGene = geneFormData => {\n    if (!isGeneFormValid(geneFormData)) {\n      this.setState({ transcripts: [] });\n      return;\n    }\n\n    // show the loading animation\n    this.setState({ isLoading: true });\n\n    // send a request to the rest API to get the transcripts\n    const result = geneApiRequest(geneFormData);\n\n    result.then(transcripts => {\n      const aminoAcid = geneFormData.aminoAcid.toUpperCase();\n      const sequencePosition = geneFormData.sequencePosition;\n\n      // Check if the actual amino acid value matches with the one user has entered\n      const proteinTranscripts = transcripts.filter(\n        transcript => transcript.seq[sequencePosition - 1] === aminoAcid\n      );\n\n      // display the transcripts to the user and hide the loading progress\n      this.setState({ transcripts: proteinTranscripts, isLoading: false });\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <GeneForm onChange={this.processGene} />\n\n        {this.state.isLoading && (\n          <Progress loadingText=\"Loading Transcripts...\" />\n        )}\n\n        <Grid item xs={12} md={12}>\n          {!this.state.isLoading && (\n            <ResultList transcripts={this.state.transcripts} />\n          )}\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Gene;\n","import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from \"prop-types\";\n\nconst styles = () => ({\n  textField: {\n    width: \"100%\"\n  },\n  textFieldLast: {\n    width: \"100%\"\n  }\n});\n\nclass HgvsForm extends Component {\n  hgvsNotationChanged = e => {\n    e.persist();\n    const hgvsNotation = e.target.value;\n    this.props.onUpdate(hgvsNotation);\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <Grid container>\n        <Grid item xs={12} md={12}>\n          <TextField\n            id=\"hgvsNotation\"\n            label=\"HGVS Notation\"\n            onChange={this.hgvsNotationChanged}\n            className={classes.textFieldLast}\n            margin=\"normal\"\n            name=\"hgvsNotation\"\n            variant=\"outlined\"\n          />\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nHgvsForm.propTypes = {\n  classes: PropTypes.object,\n  onUpdate: PropTypes.func\n};\n\nexport default withStyles(styles)(HgvsForm);\n","const aminoAcidCodes = {\n  Ala: \"A\",\n  Cys: \"C\",\n  Asp: \"D\",\n  Glu: \"E\",\n  Phe: \"F\",\n  Gly: \"G\",\n  His: \"H\",\n  Ile: \"I\",\n  Lys: \"K\",\n  Leu: \"L\",\n  Met: \"M\",\n  Asn: \"N\",\n  Pro: \"P\",\n  Gln: \"Q\",\n  Arg: \"R\",\n  Ser: \"S\",\n  Thr: \"T\",\n  Val: \"V\",\n  Trp: \"W\",\n  Tyr: \"Y\"\n};\n\nexport const isHgvsNotationValid = hgvsNotation => {\n  // Build the RegEx to validate the HGVS Notation\n  const stableIDRegex = \"((?:[a-z][a-z]*[0-9]+[a-z0-9]*))\"; // Match the Stable ID\n  const versionRegex = \"(\\\\.\\\\d)?\"; // Match the optional version\n  const colonRegex = \"(:)\"; // Match the literal ':'\n  const prefixRegex = \"([gcp])\"; // Match the prefix\n  const literalDotRegex = \"(\\\\.)\"; // Match the literal '.' before the substitution\n  const aminoAcidRegex = \"((?:[a-z][a-z]+))\"; // Match the amino acid\n  const positionRegex = \"(\\\\d+)\"; // Match the position\n\n  const hgvsValidatorRegex = new RegExp(\n    `${stableIDRegex}${versionRegex}${colonRegex}${prefixRegex}${literalDotRegex}${aminoAcidRegex}${positionRegex}${aminoAcidRegex}`,\n    [\"i\"] // Case insensitive\n  );\n\n  // Test the input notation and return the result\n  return hgvsValidatorRegex.test(hgvsNotation);\n};\n\nexport const serialiseHgvsNotation = hgvsNotation => {\n  // process the inout notationa nd identity the perts\n  hgvsNotation = hgvsNotation.split(\":\");\n\n  let stableID = hgvsNotation[0].split(\".\")[0];\n  let prefix = hgvsNotation[1].split(\".\")[0];\n  let substituiton = hgvsNotation[1].split(\".\")[1];\n  let position = substituiton.match(/\\d+/g);\n  let aminoAcidSubstitution = substituiton.match(/[a-zA-Z]+/g);\n  let aminoAcid = aminoAcidSubstitution[0];\n\n  // Convert the 3-Letter Amino acit to Single Letter\n  aminoAcid = aminoAcidCodes[aminoAcid];\n\n  const sequenceTypes = {\n    p: \"protein\",\n    g: \"genomic\",\n    c: \"coding\"\n  };\n\n  const sequenceType = sequenceTypes[prefix];\n\n  return {\n    stableID,\n    position,\n    sequenceType,\n    aminoAcid\n  };\n};\n","import React, { Component } from \"react\";\nimport HgvsForm from \"./HgvsForm\";\nimport Progress from \"components/shared/Progress\";\nimport ResultList from \"components/shared/ResultList\";\nimport { serialiseHgvsNotation, isHgvsNotationValid } from \"./Hgvs.helper\";\nimport { Grid } from \"@material-ui/core\";\nimport { hgvsApiRequest } from \"services/api\";\n\nclass Hgvs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      transcripts: []\n    };\n  }\n\n  processHgvs = hgvsNotation => {\n    if (!isHgvsNotationValid(hgvsNotation)) {\n      this.setState({ transcripts: [] });\n      return;\n    }\n\n    const serialisedHgvsNotation = serialiseHgvsNotation(hgvsNotation);\n\n    this.setState({ isLoading: true });\n    const result = hgvsApiRequest(serialisedHgvsNotation);\n\n    result.then(transcripts => {\n      const position = serialisedHgvsNotation.position;\n      const aminoAcid = serialisedHgvsNotation.aminoAcid;\n\n      const proteinTranscripts = transcripts.filter(\n        item => item.seq[position - 1] === aminoAcid\n      );\n      this.setState({ transcripts: proteinTranscripts, isLoading: false });\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <HgvsForm onUpdate={this.processHgvs} />\n\n        {this.state.isLoading && <Progress loadingText=\"Loading HGVS...\" />}\n\n        <Grid item xs={12} md={12}>\n          {!this.state.isLoading && (\n            <ResultList transcripts={this.state.transcripts} />\n          )}\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Hgvs;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormTab from \"./FormTab\";\nimport HeroContent from \"./HeroContent\";\nimport Gene from \"../Gene/Gene\";\nimport Hgvs from \"../Hgvs/Hgvs\";\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    padding: \"20px;\",\n    marginTop: \"20px\",\n    minHeight: \"600px\",\n    boxShadow: \"0px 1px 4px #ccc\"\n  },\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  }\n});\n\nclass TranscriptForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedTask: 0\n    };\n  }\n  changeTask = (e, index) => {\n    this.setState({ selectedTask: index });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.root}>\n        <HeroContent />\n        {process.env.PROTEIN_SEQUENCE_ENDPOINT_URL}\n        <Grid container className={classes.formHolder}>\n          <FormTab\n            selectTask={this.changeTask}\n            selectedTask={this.state.selectedTask}\n          />\n\n          <Grid\n            item\n            xs={12}\n            md={12}\n            style={{ display: this.state.selectedTask === 0 ? \"\" : \"none\" }}\n          >\n            <Gene />\n          </Grid>\n\n          <Grid\n            item\n            xs={12}\n            md={12}\n            style={{ display: this.state.selectedTask === 1 ? \"\" : \"none\" }}\n          >\n            <Hgvs />\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nTranscriptForm.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(TranscriptForm);\n","import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport TranscriptForm from \"./Transcript/TranscriptForm\";\nimport \"./App.css\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst styles = theme => ({\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing.unit * 3,\n    marginRight: theme.spacing.unit * 3,\n    [theme.breakpoints.up(900 + theme.spacing.unit * 3 * 2)]: {\n      width: 900,\n      marginLeft: \"auto\",\n      marginRight: \"auto\"\n    },\n    backgroundColor: \"#ccc\"\n  }\n});\n\nclass App extends Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <Header />\n        <main className={classes.layout}>\n          <TranscriptForm />\n        </main>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport registerServiceWorker from \"./serviceWorker\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport dotenv from \"dotenv\";\n\n// Load the .env values to process.env\ndotenv.config();\n\nReactDOM.render(\n  <React.Fragment>\n    <CssBaseline />\n    <App />\n  </React.Fragment>,\n  document.querySelector(\"#root\")\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}